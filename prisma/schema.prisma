generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id
  name          String
  email         String           @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  completions   Completion[]
  ownedGroups   Group[]          @relation("GroupOwner")
  sentInvites   GroupInvite[]    @relation("InviteSender")
  memberships   GroupMember[]
  pushDevices   PushDevice[]
  sessions      Session[]
  validations   ValidationVote[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Group {
  id          String            @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ownerId     String
  gamePeriods ChallengePeriod[]
  owner       User              @relation("GroupOwner", fields: [ownerId], references: [id])
  invites     GroupInvite[]
  members     GroupMember[]

  @@map("group")
}

model GroupMember {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_member")
}

model GroupInvite {
  id        String    @id @default(uuid())
  groupId   String
  senderId  String
  email     String
  status    String    @default("PENDING")
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender    User      @relation("InviteSender", fields: [senderId], references: [id])

  @@unique([groupId, email])
  @@map("group_invite")
}

model ChallengePeriod {
  id         String      @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean     @default(true)
  groupId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  challenges Challenge[]
  group      Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("challenge_period")
}

model Challenge {
  id          String           @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty       @default(MEDIUM)
  points      Int              @default(10)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  periodId    String?
  gamePeriod  ChallengePeriod? @relation(fields: [periodId], references: [id])
  completions Completion[]

  @@map("challenge")
}

model Completion {
  id                  String           @id @default(uuid())
  userId              String
  challengeId         String
  proof               String
  status              String           @default("PENDING")
  completedAt         DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  validationThreshold Int              @default(0)
  positiveVotes       Int              @default(0)
  negativeVotes       Int              @default(0)
  challenge           Challenge        @relation(fields: [challengeId], references: [id])
  user                User             @relation(fields: [userId], references: [id])
  validators          ValidationVote[]

  @@unique([userId, challengeId])
  @@map("completion")
}

model ValidationVote {
  id           String     @id @default(uuid())
  userId       String
  completionId String
  validated    Boolean
  comment      String?
  createdAt    DateTime   @default(now())
  completion   Completion @relation(fields: [completionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, completionId])
  @@map("validation_vote")
}

model PushDevice {
  id         String   @id @default(uuid())
  userId     String
  endpoint   String   @unique
  p256dh     String
  auth       String
  userAgent  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastUsedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_device")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}
