generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id
  name                   String
  email                  String                  @unique
  emailVerified          Boolean
  image                  String?
  createdAt              DateTime
  updatedAt              DateTime
  accounts               Account[]
  completions            Completion[]
  ownedGroups            Group[]                 @relation("GroupOwner")
  sentInvites            GroupInvite[]           @relation("InviteSender")
  memberships            GroupMember[]
  pushDevices            PushDevice[]
  sessions               Session[]
  validations            ValidationVote[]
  notifications          Notification[]
  comments               Comment[]
  notificationPreference NotificationPreference?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Group {
  id          String            @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ownerId     String
  gamePeriods ChallengePeriod[]
  owner       User              @relation("GroupOwner", fields: [ownerId], references: [id])
  invites     GroupInvite[]
  members     GroupMember[]

  @@index([ownerId])
  @@map("group")
}

enum GroupRole {
  ADMIN
  MEMBER
}

model GroupMember {
  id       String    @id @default(uuid())
  userId   String
  groupId  String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId])
  @@map("group_member")
}

model GroupInvite {
  id        String            @id @default(uuid())
  groupId   String
  senderId  String
  email     String
  status    GroupInviteStatus @default(PENDING)
  createdAt DateTime          @default(now())
  expiresAt DateTime?
  role      GroupRole         @default(MEMBER)
  group     Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender    User              @relation("InviteSender", fields: [senderId], references: [id])

  @@index([groupId, status])
  @@map("group_invite")
}

enum GroupInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model ChallengePeriod {
  id         String      @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  groupId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  challenges Challenge[]
  group      Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@map("challenge_period")
}

model Challenge {
  id                           String           @id @default(uuid())
  title                        String
  description                  String
  difficulty                   Difficulty       @default(MEDIUM)
  points                       Int              @default(10)
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
  periodId                     String?
  gamePeriod                   ChallengePeriod? @relation(fields: [periodId], references: [id])
  completions                  Completion[]
  requiredValidationPercentage Int              @default(50)
  attachments                  Attachment[]

  @@index([periodId])
  @@map("challenge")
}

enum CompletionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Completion {
  id          String           @id @default(uuid())
  userId      String
  challengeId String
  proof       String
  status      CompletionStatus @default(PENDING)
  completedAt DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  challenge   Challenge        @relation(fields: [challengeId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  validators  ValidationVote[]
  comments    Comment[]

  @@unique([userId, challengeId])
  @@index([challengeId])
  @@index([status])
  @@map("completion")
}

model ValidationVote {
  id           String     @id @default(uuid())
  userId       String
  completionId String
  validated    Boolean
  comment      String?
  createdAt    DateTime   @default(now())
  completion   Completion @relation(fields: [completionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, completionId])
  @@map("validation_vote")
}

model PushDevice {
  id         String   @id @default(uuid())
  userId     String
  endpoint   String   @unique
  p256dh     String
  auth       String
  userAgent  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastUsedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("push_device")
}

model Notification {
  id        String              @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  body      String
  read      Boolean             @default(false)
  data      Json? // Pour stocker des données supplémentaires (groupId, challengeId, etc.)
  channel   NotificationChannel @default(PUSH)
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt]) // Index optimisé pour les requêtes
  @@map("notification")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum NotificationType {
  GROUP_INVITE
  CHALLENGE_COMPLETED
  VALIDATION_RECEIVED
  PERIOD_STARTED
  MEMBER_JOINED
  COMMENT_ADDED
}

enum NotificationChannel {
  PUSH
  IN_APP
}

enum NotificationFrequency {
  INSTANT
  HOURLY
  DAILY
  WEEKLY
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  completionId String

  user       User         @relation(fields: [userId], references: [id])
  completion Completion   @relation(fields: [completionId], references: [id], onDelete: Cascade)
  Attachment Attachment[]

  @@index([completionId])
  @@index([userId])
}

model NotificationPreference {
  id              String  @id @default(uuid())
  userId          String  @unique
  pushEnabled     Boolean @default(true)
  inAppEnabled    Boolean @default(true)
  allowedSettings Json? // Optionnel pour stocker des préférences additionnelles
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id          String     @id @default(uuid())
  url         String
  fileType    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId   String?
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?

  @@index([commentId])
  @@index([challengeId])
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}
